{
	"id": "d50cbfc4-207e-ec11-94f6-a085fcbc9f84",
	"createdAt": "2022-01-25T20:52:55.660Z",
	"createdBy": "emmanuella",
	"globalScripts": [
		{
			"id": "E2902B2A-5725-48CB-B25C-A5F4F171FD27",
			"name": "CovidManagementScripts - UserMasterData",
			"contextname": "UserMasterData"
		},
		{
			"id": "CB406BBB-09A3-4062-8B7A-289246CD7E78",
			"name": "CovidManagementScripts - sapUtilities",
			"contextname": "sapUtilities"
		}
	],
	"externalModules": [],
	"entitySets": [],
	"apis": [
		{
			"id": "070F97AF-B2D5-46F9-DE29-732E7B1EE5A9",
			"parent": "807ED26B-414B-43B1-BB83-D31DFD705B4C",
			"name": "/getTeamMembers",
			"contextname": "getTeamMembers",
			"method": "POST"
		}
	],
	"name": "InitManager",
	"ver": "22.1.25.2118",
	"description": null,
	"content": [
		"==OBJECT STRING==",
		"var logString = \"\";",
		"try {",
		"    logString = logString + \"script: CovidManagementScripts/ManagerInitList;\" + \"fetching emp master data;\"",
		"",
		"    // Get PERNR by User    ",
		"    // User information",
		"    const user = req.user;",
		"    const reqBody = req.body;",
		"",
		"    const tableUData = entities.covid_user_data;",
		"    const tableUCerts = entities.covid_user_certificates;",
		"    const tableUMaster = entities.covid_user_master;",
		"",
		"    var userDataRec = [];",
		"    var userMaster = [];",
		"    var IATeamCount = 0;",
		"",
		"    var now = new Date().getTime();",
		"    var toTime = new Date();",
		"    toTime = toTime.setDate(toTime.getDate() + 1);",
		"",
		"    logString = logString + \"user:\" + user.username + \";\"",
		"",
		"    const p9Data = await globals.UserMasterData.getUserMaster(user);",
		"",
		"    if (!p9Data) {",
		"        logString = logString + \"user not found in p9 master;\"",
		"        throw \"Pers√∂nliche Nummer nicht gefunden. Kontakt Admin\";",
		"    }",
		"",
		"    logString = logString + \"setup begda & endda ;\"",
		"",
		"    if (reqBody.hasOwnProperty('DATE')) {",
		"        var begda = reqBody.DATE.substr(0, 6) + '01';",
		"",
		"        //log.warn(begda);",
		"",
		"        var endda = begda.substr(0, 6) + (new Date(begda.substr(0, 2), parseInt(begda.substr(2, 2)) - 1, 0).getDate())",
		"    } else {",
		"        var begda = new Date();",
		"        begda = begda.setDate(1);",
		"",
		"        begda = globals.sapUtilities.getSAPDateFromJSDate(new Date(begda));",
		"",
		"        var endda = begda.substr(0, 6) + (new Date(begda.substr(0, 2), parseInt(begda.substr(2, 2)) - 1, 0).getDate())",
		"    }",
		"",
		"",
		"    // Options for api request. Data and body are interchangeable, body will take precedence.",
		"    const opts = {",
		"",
		"        parameters: {",
		"            \"sap-client\": p9Data.client,",
		"            \"START_DATE\": begda,",
		"            \"END_DATE\": endda",
		"        },",
		"    }",
		"",
		"    logString = logString + \"fetching Teamlist;\"",
		"",
		"    // Send api request.",
		"    const respSAPEmp = await apis.getTeamMembers(opts);",
		"",
		"result = respSAPEmp;",
		"    // for (var k = 0; k < respSAPEmp.data.result.IT_MESSAGES.length; k++) {",
		"    //     logString = logString + \"some error in SAP;\"",
		"    //     if (respSAPEmp.data.result.IT_MESSAGES[k].TYPE === \"E\" || respSAPEmp.data.result.IT_MESSAGES[k].TYPE === \"A\") {",
		"    //         throw respSAPEmp.data.result.IT_MESSAGES[k].MESSAGE;",
		"    //     }",
		"",
		"    // }",
		"",
		"    // var teamList = respSAPEmp.data.result.GT_TEAM_MEMBERS;",
		"    // //teamList = getUniqueRecords(teamList, 'PERNR');",
		"",
		"    // //log.warn(JSON.stringify(teamList));",
		"",
		"    // // get ruleSet",
		"    // var ruleSet = [];",
		"    // const dataRuleSet = await entities.covid_ruleset.find({",
		"    //     where: {},",
		"    //     skip: 0,",
		"    //     take: 100,",
		"    //     cache: false,",
		"    // });",
		"",
		"    // for (var ru = 0; ru < dataRuleSet.length; ru++) {",
		"    //     ruleSet.push(dataRuleSet[ru].RULESET_ID);",
		"    // }",
		"",
		"    // logString = logString + \"fetching entries for Team;\"",
		"",
		"    // for (var t = 0; t < teamList.length; t++) {",
		"",
		"    //     // var uDataRec = await entities.covid_user_data.createQueryBuilder(\"uData\")",
		"    //     //     .where(\"uData.PERNR = :pernr\", { pernr: teamList[t].PERNR })",
		"    //     //     .leftJoinAndSelect(\"covid_user_certificates\", \"cData\", \"cData.OBJID = uData.OBJID\")",
		"    //     //     .getRawMany()",
		"",
		"    //     var uDataRec = await tableUData.find({",
		"",
		"    //         where: {",
		"    //             PERNR: teamList[t].PERNR",
		"    //         },",
		"    //         order: {",
		"    //             PERNR: \"ASC\",",
		"",
		"    //         }, // Order of result",
		"    //         skip: 0, // offset",
		"    //         take: 100000, // limit",
		"    //         cache: false, // Enables or disables caching.",
		"    //         // cache: true should only be used in global script functions that are exported to server script apis.",
		"    //     });",
		"",
		"    //     userDataRec = userDataRec.concat(uDataRec);",
		"",
		"    //     var uMaster = await tableUMaster.find({",
		"",
		"    //         where: {",
		"    //             PERNR: teamList[t].PERNR",
		"    //         },",
		"    //         order: {",
		"    //             PERNR: \"ASC\",",
		"",
		"    //         }, // Order of result",
		"    //         skip: 0, // offset",
		"    //         take: 100000, // limit",
		"    //         cache: false, // Enables or disables caching.",
		"    //         // cache: true should only be used in global script functions that are exported to server script apis.",
		"    //     });",
		"",
		"    //     userMaster = userMaster.concat(uMaster);",
		"",
		"    //     teamList[t].PERNR_S = teamList[t].PERNR.toString();",
		"",
		"    //     var IACount = uDataRec.filter(function (el) {",
		"    //         return el.STATUS == \"IA\"",
		"    //     });",
		"",
		"    //     teamList[t].IACount = IACount.length;",
		"    //     IATeamCount = IATeamCount + IACount.length;",
		"",
		"    //     pernrList = [];",
		"    //     pernrList.push(teamList[t].PERNR);",
		"",
		"",
		"    //     var rulesetEvalResult = await globals.RulesetEvaluation.evaluateRuleset(",
		"    //         {",
		"    //             PERNR_LIST: pernrList,",
		"    //             RULESET_ID_LIST: ruleSet,",
		"    //             EVAL_DATE_TIME_FROM: now,",
		"    //             EVAL_DATE_TIME_TO: toTime,",
		"    //             EVAL_DATE_TIME_STEP_SIZE: 1000 * 60 * 60 * 24 // one day",
		"    //         }",
		"    //     );",
		"",
		"    //     var nowValidation = rulesetEvalResult.filter(function (el) {",
		"    //         return el.TIMESTAMP == now",
		"    //     });",
		"",
		"    //     const dataRuleSet = await entities.covid_ruleset.find({",
		"    //         where: {},",
		"    //         order: {}, // Order of result",
		"    //         skip: 0, // offset",
		"    //         take: 100, // limit",
		"    //         cache: false, // Enables or disables caching.",
		"    //     });",
		"",
		"    //     teamList[t].EVALUATED_RULESETS = [];",
		"    //     teamList[t].EVALUATED_RESULTS = [];",
		"",
		"    //     if (nowValidation.length > 0) {",
		"    //         var evaluatedResult = nowValidation[0].EVALUATED_RULESETS;",
		"",
		"    //         for (var i in evaluatedResult) {",
		"",
		"    //             teamList[t].EVALUATED_RULESETS.push([i, evaluatedResult[i]]);",
		"    //         }",
		"",
		"    //         //teamList[t].EVALUATED_RULESETS = evaluatedResult;",
		"",
		"    //         var teamEvalRes = [];",
		"",
		"    //         for (var er = 0; er < teamList[t].EVALUATED_RULESETS.length; er++) {",
		"",
		"    //             var ruleSetSort = dataRuleSet.filter(function (el) {",
		"    //                 return el.RULESET_ID == teamList[t].EVALUATED_RULESETS[er][0]",
		"    //             });",
		"                ",
		"    //             var erJson = {",
		"    //                 \"RULESET_ID\": teamList[t].EVALUATED_RULESETS[er][0],",
		"    //                 \"OK\": teamList[t].EVALUATED_RULESETS[er][1].OK,",
		"    //                 \"ICON_SHOW\": true,",
		"    //                 \"COUNT\": 0,",
		"    //                 \"SORT_ORDER\": ruleSetSort[0].SORT_ORDER",
		"    //             }",
		"",
		"    //             if (erJson.OK) {",
		"    //                 erJson.OK_ICON = \"sap-icon://fa-solid/check-circle\";",
		"    //                 erJson.OK_COLOR = \"green\";",
		"    //             } else {",
		"    //                 erJson.OK_ICON = \"sap-icon://fa-solid/ban\";",
		"    //                 erJson.OK_COLOR = \"red\";",
		"    //             }",
		"",
		"    //             teamEvalRes.push(erJson);",
		"    //         }",
		"",
		"    //         var erJson = {",
		"    //             \"RULESET_ID\": \"AWT\",",
		"    //             \"OK\": true,",
		"    //             \"COUNT\": teamList[t].IACount,",
		"    //             \"COUNT_COLOR\": \"Warning\",",
		"    //             \"ICON_SHOW\": false,",
		"    //             \"SORT_ORDER\": 0",
		"    //         }",
		"",
		"    //         teamEvalRes.push(erJson);",
		"",
		"    //         teamEvalRes.sort((a, b) => (a.SORT_ORDER > b.SORT_ORDER) ? 1 : -1);",
		"",
		"    //         teamList[t].EVALUATED_RESULTS = teamEvalRes;",
		"",
		"    //     }",
		"",
		"    // }",
		"",
		"    // var kpiData = await globals.GetKPIData.generateKPI(teamList);",
		"    // var kpiChartData = await globals.GetKPIData.getChartKPI(teamList)",
		"",
		"    // var statusIA = await globals.GetStatusValue.getStatusText('IA', p9Data.language)",
		"",
		"    // var newKPIIA = {",
		"    //     \"RULESET_ID\": statusIA.STATUS_TEXT,",
		"    //     \"COUNT\": IATeamCount",
		"    // }",
		"    // kpiData.push(newKPIIA);",
		"    ",
		"    //var kpiData = testKPI(teamList,dataRuleSet)",
		"",
		"    // for (var ur = 0; ur < userDataRec.length; ur++) {",
		"    //     var certResult = await globals.RulesetEvaluation.evaluateUserCertificateSingle({",
		"    //         USER_DATA: userDataRec[ur],",
		"    //         EVAL_DATE_TIME: now",
		"    //     });",
		"        ",
		"    //     if (certResult.hasOwnProperty('OK')) {",
		"    //         userDataRec[ur].VALID_STATUS = certResult.OK",
		"    //         userDataRec[ur].REMINDER_REACHED = certResult.REMINDER_REACHED",
		"    //         userDataRec[ur].VALIDITY_END_MS = certResult.VALIDITY_END_MS",
		"    //         userDataRec[ur].VALIDITY_END_TEXT = certResult.VALIDITY_END_TEXT",
		"    //         userDataRec[ur].VALID_TO_TIMESTAMP = certResult.VALID_TO_TIMESTAMP",
		"    //     } else {",
		"    //         userDataRec[ur].VALID_STATUS = false",
		"    //         userDataRec[ur].REMINDER_REACHED = certResult.REMINDER_REACHED",
		"    //         userDataRec[ur].VALIDITY_END_MS = certResult.VALIDITY_END_MS",
		"    //         userDataRec[ur].VALIDITY_END_TEXT = certResult.VALIDITY_END_TEXT",
		"    //         userDataRec[ur].VALID_TO_TIMESTAMP = certResult.VALID_TO_TIMESTAMP",
		"    //     }",
		"",
		"    // }",
		"",
		"    // result = {",
		"    //     \"userDataRec\": userDataRec,",
		"    //     \"userMaster\": userMaster,",
		"    //     \"teamList\": teamList,",
		"    //     \"kpiData\": {",
		"    //         \"syncTime\": now,",
		"    //         \"chartCount\": kpiData",
		"    //     },",
		"    //     \"kpiDataChart\": {",
		"    //         \"syncTime\": now,",
		"    //         \"chartCount\": kpiChartData",
		"    //     }",
		"    // };",
		"",
		"    //log.warn(JSON.stringify(result));",
		"",
		"",
		"    complete();",
		"} catch (error) {",
		"    log.error(logString);",
		"    log.error(error);",
		"    fail(error);",
		"}",
		"",
		"// function getUniqueRecords(arr, key) {",
		"",
		"//     var resArr = [];",
		"//     arr.filter(function (item) {",
		"//         var i = resArr.findIndex(x => (x[key] == item[key]));",
		"//         if (i <= -1) {",
		"//             resArr.push(item);",
		"//         }",
		"//         return null;",
		"//     });",
		"",
		"//     return resArr;",
		"// }",
		"",
		"// function testKPI(teamList, dataRuleSet) {",
		"//     var counts = [];",
		"",
		"",
		"//     for (var r = 0; r < dataRuleSet.length; r++) {",
		"",
		"//         var countRule = 0;",
		"//         for (var t = 0; t < teamList.length; t++) {",
		"",
		"//             var cc = teamList[t].EVALUATED_RESULTS.filter(function (el) {",
		"//                 return (el.RULESET_ID == dataRuleSet[r].RULESET_ID && el.OK)",
		"//             });",
		"",
		"//             log.info(\"cc: \" + JSON.stringify(cc))",
		"",
		"//             countRule = countRule + cc.length;",
		"//         }",
		"",
		"//         var countOne = {",
		"//             \"RULESET_ID\": dataRuleSet[r].RULESET_ID,",
		"//             \"COUNT\": countRule",
		"//         }",
		"",
		"//         counts.push(countOne);",
		"//     }",
		"",
		"//     return counts;",
		"// }"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": false,
	"jsscriptGroup": "a04e57d7-2b79-ec11-94f6-a085fcbc9f84",
	"package": "c32aaee6-1079-ec11-94f6-a085fcbc9f84"
}